// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client"
  previewFeatures = ["multiSchema"]
  output          = "../src/db/.generated"
  moduleFormat    = "esm"
  binaryTargets   = ["native", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Events table - Tracks all system events
model Event {
  id             String    @id @default(cuid())
  eventCategory  String    @map("event_category") @db.VarChar(100)
  eventType      String    @map("event_type") @db.VarChar(100)
  actorId        String?   @map("actor_id") @db.VarChar(255)
  repositoryId   String?   @map("repository_id") @db.VarChar(255)
  workflowId     String?   @map("workflow_id") @db.VarChar(255)
  organizationId String    @map("organization_id") @db.VarChar(255)
  eventData      Json      @map("event_data")
  metadata       Json?
  contextId      String?   @map("context_id") @db.VarChar(255)
  parentEventId  String?   @map("parent_event_id") @db.VarChar(255)
  tags           String[]  @default([])
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt      DateTime? @map("updated_at") @db.Timestamp()
  resolvedAt     DateTime? @map("resolved_at") @db.Timestamp()

  // Relations
  // repository Repository? @relation("RepositoryToEvent", fields: [repositoryId], references: [id])
  parent   Event?  @relation("EventToEvent", fields: [parentEventId], references: [id])
  children Event[] @relation("EventToEvent")

  @@index([eventCategory], name: "event_category_idx")
  @@index([eventType], name: "event_type_idx")
  @@index([createdAt], name: "created_at_idx")
  @@index([organizationId], name: "organization_id_idx")
  @@index([contextId], name: "context_id_idx")
  @@index([tags], name: "tags_idx")
  @@map("events")
}

// Enums for Event categories and types
enum EventCategory {
  NOTIFICATION_DISCORD
  NOTIFICATION_SLACK
  NOTIFICATION_EMAIL
  ACTIVITY
  ERROR
}

enum EventType {
  REMINDER_SENT
  PR_NOTIFIED
  COMMENT_NOTIFIED
  MENTION_NOTIFIED
  REPORT_PR_LIST
  REPORT_PR_DETAILS
  PR_CREATED
  PR_UPDATED
  PR_REVIEWED
  PR_MERGED
  PR_CLOSED
  PR_STALLED
  SYSTEM_STARTED
  SYSTEM_STOPPED
  SYSTEM_ERROR
  CONFIG_CHANGED
  USER_LOGIN
  USER_LOGOUT
  PERMISSION_CHANGED
  USER_ACTION
}

// Platform enum for channels
enum Platform {
  discord
  slack
}

// Organizations table
model Organization {
  id            Int       @id @default(autoincrement())
  githubTokenId String?   @map("github_token_id") @db.VarChar(255)
  githubName    String    @unique @map("github_name") @db.VarChar(255)
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt     DateTime? @updatedAt @map("updated_at") @db.Timestamp()

  // Relations
  channels     Channel[]
  repositories Repository[]

  @@map("organizations")
}

// Members table
model Member {
  id           Int       @id @default(autoincrement())
  githubId     String    @map("github_id") @db.VarChar(255)
  platformId   String    @map("platform_id") @db.VarChar(255)
  platformType String    @map("platform_type") @db.VarChar(255)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt    DateTime? @updatedAt @map("updated_at") @db.Timestamp()

  @@unique([githubId, platformId, platformType])
  @@map("members")
}

// Channels table
model Channel {
  id                Int       @id @default(autoincrement())
  name              String    @db.VarChar(255)
  platform          Platform  @default(discord)
  platformChannelId String    @map("platform_channel_id") @db.VarChar(255)
  organizationId    Int       @map("organization_id")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt         DateTime? @updatedAt @map("updated_at") @db.Timestamp()

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  repositories Repository[]

  @@unique([platform, platformChannelId])
  @@index([organizationId])
  @@map("channels")
}

// Repositories table
model Repository {
  id             Int       @id @default(autoincrement())
  githubRepoName String    @map("github_repo_name") @db.VarChar(255)
  organizationId Int       @map("organization_id")
  channelId      Int       @map("channel_id")
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt      DateTime? @updatedAt @map("updated_at") @db.Timestamp()

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  channel      Channel      @relation(fields: [channelId], references: [id])

  @@unique([organizationId, githubRepoName])
  @@index([channelId])
  @@map("repositories")
}
